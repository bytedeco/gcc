name: Deploy on Ubuntu
description: Build environment setup for builds which run on Ubuntu 20.04 machines
runs:
  using: composite
  steps:
    - name: Install environment
      shell: bash
      run: |
        cd /root
        export DEBIAN_FRONTEND=noninteractive

        apt-get update
        apt-get install -y python2.7 pkg-config ccache default-jre-headless openjdk-8-jdk-headless python python3-dev python3-pip git file unzip tar bzip2 gzip patch make libtool bison flex perl nasm curl cmake tree
        apt-get install -y libbz2-dev zlib1g-dev

        case "$CI_DEPLOY_PLATFORM" in
          linux-armhf)
            export ARCH=armhf
            export PREFIX=arm-linuxgnueabihf
            apt-get install -y gcc-10-arm-linux-gnueabihf g++-10-arm-linux-gnueabihf binutils-arm-linux-gnueabihf
            rm -rf /usr/bin/arm-linux-gnueabihf-gnu-gcc /usr/bin/arm-linux-gnueabihf-g++
            ln -s $(which arm-linux-gnueabihf-gcc-10) /usr/bin/arm-linux-gnueabihf-gcc
            ln -s $(which arm-linux-gnueabihf-g++-10) /usr/bin/arm-linux-gnueabihf-g++
            ;;
          linux-arm64)
            export ARCH=arm64
            export PREFIX=aarch64-linux-gnu
            apt-get install -y gcc-10-aarch64-linux-gnueabihf g++-10-aarch64-linux-gnueabihf binutils-aarch64-linux-gnueabihf
            rm -rf /usr/bin/aarch64-linux-gnu-gcc /usr/bin/aarch64-linux-gnu-g++
            ln -s $(which aarch64-linux-gnu-gcc-10) /usr/bin/aarch64-linux-gnu-gcc
            ln -s $(which aarch64-linux-gnu-g++-10) /usr/bin/aarch64-linux-gnu-g++
            ;;
          linux-ppc64le)
            export ARCH=ppc64el
            export PREFIX=powerpc64le-linux-gnu
            apt-get install -y gcc-10-powerpc64le-linux-gnu g++-10-powerpc64le-linux-gnu binutils-powerpc64le-linux-gnu
            rm -rf /usr/bin/powerpc64le-linux-gnu-gcc /usr/bin/powerpc64le-linux-gnu-g++
            ln -s $(which powerpc64le-linux-gnu-gcc-10) /usr/bin/powerpc64le-linux-gnu-gcc
            ln -s $(which powerpc64le-linux-gnu-g++-10) /usr/bin/powerpc64le-linux-gnu-g++
            ;;
          *)
            echo "Platform \"$CI_DEPLOY_PLATFORM\" is not supported."
            exit 1
            ;;
        esac

        echo "ARCH=$ARCH" >> $GITHUB_ENV
        echo "PREFIX=$PREFIX" >> $GITHUB_ENV

        curl -LO https://services.gradle.org/distributions/gradle-6.7.1-bin.zip
        unzip gradle-6.7.1-bin.zip -d /opt/
        ln -sf /opt/gradle-6.7.1/bin/gradle /usr/bin/gradle

        GRADLE_TASK=publishToMavenLocal
        if [[ -n ${CI_DEPLOY_USERNAME:-} ]] && [[ ! "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
          GRADLE_TASK=publish
        fi
        echo "GRADLE_TASK=$GRADLE_TASK" >> $GITHUB_ENV

    - name: Build project
      shell: bash
      run: |
        git --version
        $PREFIX-gcc --version
        $PREFIX-g++ --version
        gcc --version
        g++ --version
        cmake --version
        gradle --version
        java --version
        df -h

        export MAKEJ=$(getconf _NPROCESSORS_ONLN)
        git init
        git fetch --depth 1 https://github.com/$GITHUB_REPOSITORY $GITHUB_SHA
        git checkout $GITHUB_SHA
        git submodule update --init --recursive
        git submodule foreach --recursive 'git reset --hard'

        echo "Fixing HOME to /root (was '$HOME')"
        export HOME=/root

        echo Executing Gradle $GRADLE_TASK ${{ matrix.options }} on $MAKEJ processors
        export GRADLE_OPTIONS="-Dorg.gradle.jvmargs=-Xmx2048m -PjavacppPlatform=$CI_DEPLOY_PLATFORM -Djava.library.path=/usr/$PREFIX/lib/:/usr/lib/$PREFIX/ -Dorg.bytedeco.javacpp.platform.compiler=$PREFIX-g++ -PjavacppPlatformExtension=${{ matrix.ext }} ${{ matrix.options }} --info"
        gradle clean build $GRADLE_OPTIONS -b $CI_DEPLOY_MODULE/build.gradle

        echo Publishing only now to help avoid race conditions with Gradle
        gradle $GRADLE_TASK $GRADLE_OPTIONS -b $CI_DEPLOY_MODULE/build.gradle --refresh-dependencies

        df -h