import org.bytedeco.gradle.javacpp.BuildTask

plugins {
    id "java-library"
    id "maven-publish"
    id "signing"
    id "org.bytedeco.gradle-javacpp-build" version "$javacppVersion"
}

group = "org.bytedeco"
version = "10.2.0-$javacppVersion"

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
    api "org.bytedeco:javacpp:$javacppVersion"
    javacppPlatform "org.bytedeco:javacpp-platform:$javacppVersion"
    javacppPlatform "org.bytedeco:gcc:$version:linux-x86_64"

    testRuntimeOnly "org.bytedeco:javacpp:$javacppVersion:$javacppPlatform"
    testImplementation "junit:junit:4.13.1"
}

tasks.withType(BuildTask) {
    includePath = ["$buildDir/$javacppPlatform/install/include"]
    linkPath = ["$buildDir/$javacppPlatform/install/lib"]
}

javacppBuildCommand {
    buildCommand = ["bash", "build.sh"]
}

javacppBuildParser {
    classOrPackageNames = ["org.bytedeco.gcc.presets.*"]
    outputDirectory = file("src/gen/java/")
}

javacppBuildCompiler {
    copyLibs = true
}

jar {
    manifest {
        attributes 'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' '),
                'Implementation-Title': 'JavaCPP Presets for GCC',
                'Implementation-Vendor': 'Bytedeco',
                'Implementation-Version': version,
                'Specification-Title': 'JavaCPP Presets for GCC',
                'Specification-Vendor': 'Bytedeco',
                'Specification-Version': version
    }
}

javadoc {
    failOnError = false
    options.links = ["http://bytedeco.org/javacpp/apidocs"]
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

def pomClosure = {
    name = "Bytedeco GCC"
    delegate.description = "Bytedeco JavaCPP presets for GCC"
    url = "https://github.com/bytedeco/gcc/"
    licenses {
        license {
            name = "Apache License, Version 2.0"
            url = "http://www.apache.org/licenses/LICENSE-2.0"
            distribution = "repo"
        }
        license {
            name = "GNU General Public License (GPL) version 2, or any later version"
            url = "http://www.gnu.org/licenses/"
            distribution = "repo"
        }
        license {
            name = "GPLv2 with Classpath exception"
            url = "http://www.gnu.org/software/classpath/license.html"
            distribution = "repo"
        }
    }
    developers {
        developer {
            id = "saudet"
            name = "Samuel Audet"
            email = "samuel.audet@gmail.com"
        }
        developer {
            id = "supergrecko"
            name = "Mats Larsen"
            email = "me@supergrecko.com"
        }
    }
    scm {
        url = "https://github.com/bytedeco/gcc"
        connection = "scm:git:git://github.com/bytedeco/gcc.git"
        developerConnection = "scm:git:ssh://git@github.com/bytedeco/gcc.git"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifacts = [jar, javacppJar, javadocJar, sourcesJar] + javacppBuild.existingArtifacts(configurations.javacppPlatform)
            pom pomClosure
        }
        mavenJavacppPlatform(MavenPublication) {
            groupId project.group
            artifactId project.name + "-platform"
            artifacts = [javacppPlatformJar, javacppPlatformJavadocJar, javacppPlatformSourcesJar]
            pom pomClosure
            pom.withXml javacppBuild.xmlAction(configurations.javacppPlatform)
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username System.getenv('CI_DEPLOY_USERNAME')
                password System.getenv('CI_DEPLOY_PASSWORD')
            }
        }
    }
}

signing {
    useGpgCmd()
    if (!version.endsWith('SNAPSHOT')) {
        sign publishing.publications.mavenJava
        sign publishing.publications.mavenJavacppPlatform
    }
}